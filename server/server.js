require('dotenv').config();

const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.json());

// API –¥–ª—è –ø—Ä–∏–π–æ–º—É —Ñ–æ—Ä–º–∏
app.post('/proxy', async (req, res) => {
  const { name, phone, message, formType, age } = req.body;

  if (!name || !phone || !formType) {
    return res.status(400).json({ status: 'error', message: '–û–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ' });
  }

  const token = process.env.BOT_TOKEN;
  const chatId = process.env.CHAT_ID;

  const text = `üì© –§–æ—Ä–º–∞: ${formType}\nüë§ –Ü–º‚Äô—è: ${name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n${age ? `üéÇ –í—ñ–∫: ${age}\n` : ''}üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${message || '‚Äî'}`;

  try {
    await axios.post(`https://api.telegram.org/bot${token}/sendMessage`, {
      chat_id: chatId,
      text,
    });

    return res.json({ status: 'ok', message: '–£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ' });
  } catch (error) {
    console.error(error.response?.data || error.message);
    return res.status(500).json({ status: 'error', message: '–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram' });
  }
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ ${PORT}`);
});
